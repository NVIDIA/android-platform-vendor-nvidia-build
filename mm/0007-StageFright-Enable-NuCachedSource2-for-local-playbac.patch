From cdde8199155ae1cda45903b0f6c5bc8bd1cae3ea Mon Sep 17 00:00:00 2001
From: Suresh Choudhary <sureshc@nvidia.com>
Date: Thu, 21 Jun 2012 06:40:19 +0530
Subject: [PATCH 07/40] StageFright: Enable NuCachedSource2 for local playback.

Enables NuCachedSource2 for local playback and integrates
all related fixes from NV's ICS branch.

Bug 991874

Change-Id: Idb0a49dd9b8b33ee6c8d6cce9c1e817069a4fbe9
Reviewed-on: http://git-psac/r/290
Reviewed-by: Rohan Somvanshi <rsomvanshi@nvidia.com>
Tested-by: Rohan Somvanshi <rsomvanshi@nvidia.com>
---
 include/media/stagefright/DataSource.h         |    4 ++
 media/libstagefright/AwesomePlayer.cpp         |   14 +++++++-
 media/libstagefright/DataSource.cpp            |   11 +++++-
 media/libstagefright/NuCachedSource2.cpp       |   39 ++++++++++++++++++++----
 media/libstagefright/include/AwesomePlayer.h   |   31 +++++++++++++++++++
 media/libstagefright/include/NuCachedSource2.h |    4 ++-
 6 files changed, 92 insertions(+), 11 deletions(-)

diff --git a/include/media/stagefright/DataSource.h b/include/media/stagefright/DataSource.h
index 00d583e..5ea40c2 100644
--- a/include/media/stagefright/DataSource.h
+++ b/include/media/stagefright/DataSource.h
@@ -46,6 +46,10 @@ public:
             const char *uri,
             const KeyedVector<String8, String8> *headers = NULL);
 
+    static sp<DataSource> CreateCachedSourceFromURI(
+            const char *uri,
+            const KeyedVector<String8, String8> *headers = NULL);
+
     DataSource() {}
 
     virtual status_t initCheck() const = 0;
diff --git a/media/libstagefright/AwesomePlayer.cpp b/media/libstagefright/AwesomePlayer.cpp
index 87e4886..a9be6c6 100644
--- a/media/libstagefright/AwesomePlayer.cpp
+++ b/media/libstagefright/AwesomePlayer.cpp
@@ -302,7 +302,8 @@ status_t AwesomePlayer::setDataSource(
 
     reset_l();
 
-    sp<DataSource> dataSource = new FileSource(fd, offset, length);
+    sp<DataSource> fileSource = new FileSource(fd, offset, length);
+    sp<DataSource> dataSource = new NuCachedSource2(fileSource);
 
     status_t err = dataSource->initCheck();
 
@@ -332,6 +333,11 @@ status_t AwesomePlayer::setDataSource_l(
     if (extractor == NULL) {
         return UNKNOWN_ERROR;
     }
+    mDataSourceFlags = dataSource->flags();
+#ifdef PROFILING
+    // Redundant call, can this be removed?
+    setProfileFlags();
+#endif
 
     if (extractor->getDrmFlag()) {
         checkDrmStatus(dataSource);
@@ -563,6 +569,7 @@ void AwesomePlayer::reset_l() {
 
     mFileSource.clear();
 
+    mDataSourceFlags = 0;
     mBitrate = -1;
     mLastVideoTimeUs = -1;
 
@@ -1598,7 +1605,9 @@ void AwesomePlayer::onVideoEvent() {
             mVideoBuffer = NULL;
         }
 
-        if (mSeeking == SEEK && isStreamingHTTP() && mAudioSource != NULL
+        bool streaming = isStreamingHTTP() ||
+                         (mDataSourceFlags & DataSource::kIsCachingDataSource);
+        if (mSeeking == SEEK && streaming && mAudioSource != NULL
                 && !(mFlags & SEEK_PREVIEW)) {
             // We're going to seek the video source first, followed by
             // the audio source.
@@ -2129,6 +2138,7 @@ status_t AwesomePlayer::finishSetDataSource_l() {
         return UNKNOWN_ERROR;
     }
 
+    mDataSourceFlags = dataSource->flags();
     sp<MediaExtractor> extractor;
 
     if (isWidevineStreaming) {
diff --git a/media/libstagefright/DataSource.cpp b/media/libstagefright/DataSource.cpp
index 9261369..190eded 100644
--- a/media/libstagefright/DataSource.cpp
+++ b/media/libstagefright/DataSource.cpp
@@ -137,11 +137,17 @@ void DataSource::RegisterDefaultSniffers() {
 // static
 sp<DataSource> DataSource::CreateFromURI(
         const char *uri, const KeyedVector<String8, String8> *headers) {
+    return CreateCachedSourceFromURI(uri, headers);
+}
+
+sp<DataSource> DataSource::CreateCachedSourceFromURI(
+        const char *uri, const KeyedVector<String8, String8> *headers) {
     bool isWidevine = !strncasecmp("widevine://", uri, 11);
 
     sp<DataSource> source;
     if (!strncasecmp("file://", uri, 7)) {
-        source = new FileSource(uri + 7);
+        sp<DataSource> fileSource = new FileSource(uri + 7);
+        source = new NuCachedSource2(fileSource);
     } else if (!strncasecmp("http://", uri, 7)
             || !strncasecmp("https://", uri, 8)
             || isWidevine) {
@@ -183,7 +189,8 @@ sp<DataSource> DataSource::CreateFromURI(
 #endif
     } else {
         // Assume it's a filename.
-        source = new FileSource(uri);
+        sp<DataSource> fileSource = new FileSource(uri);
+        source = new NuCachedSource2(fileSource);
     }
 
     if (source == NULL || source->initCheck() != OK) {
diff --git a/media/libstagefright/NuCachedSource2.cpp b/media/libstagefright/NuCachedSource2.cpp
index 05e599b..8dd7b56 100644
--- a/media/libstagefright/NuCachedSource2.cpp
+++ b/media/libstagefright/NuCachedSource2.cpp
@@ -190,6 +190,7 @@ NuCachedSource2::NuCachedSource2(
       mLastAccessPos(0),
       mFetching(true),
       mLastFetchTimeUs(-1),
+      mFetchMoreCount(1),
       mNumRetriesLeft(kMaxNumRetries),
       mHighwaterThresholdBytes(kDefaultHighWaterThreshold),
       mLowwaterThresholdBytes(kDefaultLowWaterThreshold),
@@ -214,9 +215,6 @@ NuCachedSource2::NuCachedSource2(
     mLooper->setName("NuCachedSource2");
     mLooper->registerHandler(mReflector);
     mLooper->start();
-
-    Mutex::Autolock autoLock(mLock);
-    (new AMessage(kWhatFetchMore, mReflector->id()))->post();
 }
 
 NuCachedSource2::~NuCachedSource2() {
@@ -227,6 +225,13 @@ NuCachedSource2::~NuCachedSource2() {
     mCache = NULL;
 }
 
+void NuCachedSource2::onFirstRef() {
+    Mutex::Autolock autoLock(mLock);
+
+    mFetching = true;
+    (new AMessage(kWhatFetchMore, mReflector->id()))->post();
+}
+
 status_t NuCachedSource2::getEstimatedBandwidthKbps(int32_t *kbps) {
     if (mSource->flags() & kIsHTTPBasedSource) {
         HTTPBase* source = static_cast<HTTPBase *>(mSource.get());
@@ -380,6 +385,12 @@ void NuCachedSource2::onFetch() {
                 static_cast<HTTPBase *>(mSource.get())->disconnect();
                 mFinalStatus = -EAGAIN;
             }
+
+            if (mFetchMoreCount > 1)
+            {
+                mFetchMoreCount--;
+                return;
+            }
         }
     } else {
         Mutex::Autolock autoLock(mLock);
@@ -416,7 +427,7 @@ void NuCachedSource2::onRead(const sp<AMessage> &msg) {
     ssize_t result = readInternal(offset, data, size);
 
     if (result == -EAGAIN) {
-        msg->post(50000);
+        msg->post(1000);
         return;
     }
 
@@ -432,7 +443,7 @@ void NuCachedSource2::onRead(const sp<AMessage> &msg) {
 
 void NuCachedSource2::restartPrefetcherIfNecessary_l(
         bool ignoreLowWaterThreshold, bool force) {
-    static const size_t kGrayArea = 1024 * 1024;
+    static const size_t kGrayArea = 6 * 1024 * 1024;
 
     if (mFetching || (mFinalStatus != OK && mNumRetriesLeft == 0)) {
         return;
@@ -459,6 +470,8 @@ void NuCachedSource2::restartPrefetcherIfNecessary_l(
 
     ALOGI("restarting prefetcher, totalSize = %d", mCache->totalSize());
     mFetching = true;
+    mFetchMoreCount++;
+    (new AMessage(kWhatFetchMore, mReflector->id()))->post(0);
 }
 
 ssize_t NuCachedSource2::readAt(off64_t offset, void *data, size_t size) {
@@ -476,6 +489,7 @@ ssize_t NuCachedSource2::readAt(off64_t offset, void *data, size_t size) {
         mCache->copy(delta, data, size);
 
         mLastAccessPos = offset + size;
+        restartPrefetcherIfNecessary_l();
 
         return size;
     }
@@ -558,7 +572,7 @@ ssize_t NuCachedSource2::readInternal(off64_t offset, void *data, size_t size) {
 
     size_t delta = offset - mCacheOffset;
 
-    if (mFinalStatus != OK && mNumRetriesLeft == 0) {
+    if (mFinalStatus != OK) {
         if (delta >= mCache->totalSize()) {
             return mFinalStatus;
         }
@@ -581,6 +595,11 @@ ssize_t NuCachedSource2::readInternal(off64_t offset, void *data, size_t size) {
     }
 
     ALOGV("deferring read");
+    if (!mFetching)
+    {
+       mLastAccessPos = offset;
+       restartPrefetcherIfNecessary_l(true);
+    }
 
     return -EAGAIN;
 }
@@ -600,6 +619,14 @@ status_t NuCachedSource2::seekInternal_l(off64_t offset) {
     size_t totalSize = mCache->totalSize();
     CHECK_EQ(mCache->releaseFromStart(totalSize), totalSize);
 
+    mFinalStatus = OK;
+    if (!mFetching)
+    {
+        mFetching = true;
+        mFetchMoreCount++;
+        (new AMessage(kWhatFetchMore, mReflector->id()))->post(0);
+    }
+
     mNumRetriesLeft = kMaxNumRetries;
     mFetching = true;
 
diff --git a/media/libstagefright/include/AwesomePlayer.h b/media/libstagefright/include/AwesomePlayer.h
index 1422687..2c830a9 100644
--- a/media/libstagefright/include/AwesomePlayer.h
+++ b/media/libstagefright/include/AwesomePlayer.h
@@ -341,6 +341,37 @@ private:
 
     AwesomePlayer(const AwesomePlayer &);
     AwesomePlayer &operator=(const AwesomePlayer &);
+    uint32_t mDataSourceFlags;
+#ifdef PROFILING
+    struct ProfileStats{
+        uint32_t numLateSeek;
+        uint32_t numRendFrame;
+        uint32_t noAudio;
+        uint32_t noAvsync;
+        uint32_t noPreCache;
+        uint32_t statFlag;
+        uint32_t noRender;
+        uint32_t showJitter;
+        uint32_t printVideoStat;
+        uint32_t printAudioStat;
+        int32_t videoFrameRate;
+
+        //flags for audio profiling
+        int32_t mInSamplerate;
+        int32_t mInChannels;
+        int32_t mInBitrate;
+        int32_t mOutSamplerate;
+        int32_t mOutChannels;
+
+        int64_t startTimeUs;
+        int64_t audioStartTimeUs;
+        int64_t mInDurationUs;
+        JitterTool *pJitter;
+    };
+    ProfileStats *mProfileStats;
+
+    void setProfileFlags();
+#endif
 };
 
 }  // namespace android
diff --git a/media/libstagefright/include/NuCachedSource2.h b/media/libstagefright/include/NuCachedSource2.h
index 5db4b4b..9605380 100644
--- a/media/libstagefright/include/NuCachedSource2.h
+++ b/media/libstagefright/include/NuCachedSource2.h
@@ -72,7 +72,7 @@ private:
 
     enum {
         kPageSize                       = 65536,
-        kDefaultHighWaterThreshold      = 20 * 1024 * 1024,
+        kDefaultHighWaterThreshold      = 40 * 1024 * 1024,
         kDefaultLowWaterThreshold       = 4 * 1024 * 1024,
 
         // Read data after a 15 sec timeout whether we're actively
@@ -104,6 +104,7 @@ private:
     sp<AMessage> mAsyncResult;
     bool mFetching;
     int64_t mLastFetchTimeUs;
+    int mFetchMoreCount;
 
     int32_t mNumRetriesLeft;
 
@@ -115,6 +116,7 @@ private:
 
     bool mDisconnectAtHighwatermark;
 
+    virtual void onFirstRef();
     void onMessageReceived(const sp<AMessage> &msg);
     void onFetch();
     void onRead(const sp<AMessage> &msg);
-- 
1.7.1

