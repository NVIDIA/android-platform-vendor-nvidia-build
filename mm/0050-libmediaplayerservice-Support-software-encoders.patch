From abe74bd8f6562243ecb6bf7cc3f161fee7a81e25 Mon Sep 17 00:00:00 2001
From: aarti jadhav-gaikwad <agaikwad@nvidia.com>
Date: Tue, 16 Oct 2012 20:44:38 +0530
Subject: [PATCH 3/6] libmediaplayerservice: Support software encoders

Modified StagefrightRecorder to allow software
encoders also. Earlier the camera source was
assuming that consumer is Nvidia encoder by default

Bug 1159760

Change-Id: I3cd2ce7dafa669e60d0cd4d6118760dd58379770
---
 .../libmediaplayerservice/StagefrightRecorder.cpp  |   34 +++++++++++++++++++-
 1 files changed, 33 insertions(+), 1 deletions(-)

diff --git a/media/libmediaplayerservice/StagefrightRecorder.cpp b/media/libmediaplayerservice/StagefrightRecorder.cpp
index 57b0ec2..965e702 100644
--- a/media/libmediaplayerservice/StagefrightRecorder.cpp
+++ b/media/libmediaplayerservice/StagefrightRecorder.cpp
@@ -38,6 +38,7 @@
 #include <media/stagefright/OMXClient.h>
 #include <media/stagefright/OMXCodec.h>
 #include <media/stagefright/SurfaceMediaSource.h>
+#include <media/stagefright/MediaCodecList.h>
 #include <media/MediaProfiles.h>
 #include <camera/ICamera.h>
 #include <camera/CameraParameters.h>
@@ -1298,9 +1299,40 @@ status_t StagefrightRecorder::setupSurfaceMediaSource() {
 status_t StagefrightRecorder::setupCameraSource(
         sp<CameraSource> *cameraSource) {
     status_t err = OK;
+    const MediaCodecList *list = MediaCodecList::getInstance();
+    ssize_t matchIndex = 0, index = 0;
+    bool storeMetaDataInVideoBuffers = false;
+    const char* mime = MEDIA_MIMETYPE_VIDEO_AVC;
     if ((err = checkVideoEncoderCapabilities()) != OK) {
         return err;
     }
+
+    if (list != NULL) {
+        if (mVideoEncoder == VIDEO_ENCODER_H263) {
+            mime = MEDIA_MIMETYPE_VIDEO_H263;
+        } else if (mVideoEncoder == VIDEO_ENCODER_MPEG_4_SP) {
+            mime = MEDIA_MIMETYPE_VIDEO_MPEG4;
+        }
+
+        for (;;) {
+            matchIndex = list->findCodecByType(mime, true, index);
+            if (matchIndex < 0) {
+                ALOGE("Hardware encoder not found");
+                break;
+            }
+
+            index = matchIndex + 1;
+
+            const char *componentName = list->getCodecName(matchIndex);
+            if (!strncmp(componentName, "OMX.Nvidia.", 11)) {
+                storeMetaDataInVideoBuffers = true;
+                break;
+            }
+        }
+    } else {
+        storeMetaDataInVideoBuffers = true;
+    }
+
     Size videoSize;
     videoSize.width = mVideoWidth;
     videoSize.height = mVideoHeight;
@@ -1319,7 +1351,7 @@ status_t StagefrightRecorder::setupCameraSource(
     } else {
         *cameraSource = CameraSource::CreateFromCamera(
                 mCamera, mCameraProxy, mCameraId, videoSize, mFrameRate,
-                mPreviewSurface, true /*storeMetaDataInVideoBuffers*/);
+                mPreviewSurface, storeMetaDataInVideoBuffers /*storeMetaDataInVideoBuffers*/);
     }
     mCamera.clear();
     mCameraProxy.clear();
-- 
1.7.1

