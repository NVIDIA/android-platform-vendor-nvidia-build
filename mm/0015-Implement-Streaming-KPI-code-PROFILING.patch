From 207b2024a3288b33968122062f06e081bf9949ae Mon Sep 17 00:00:00 2001
From: Suresh Choudhary <sureshc@nvidia.com>
Date: Mon, 29 Oct 2012 16:46:19 +0530
Subject: [PATCH 15/40] Implement Streaming KPI code(PROFILING)

Implement the code for logging the streaming KPIs.
Measure Initial Buffering Latency, no. of farmes
dropped by parser & renderer, total frame drop,
and log them at the end.
Also enable audio disabling with "enable-nuNoAud"
and AV sync with "enable-nuNoAvs".

Bug 991874

Change-Id: I3f09830195a7bdd122d5c148429061408173a30f
Reviewed-on: http://git-psac/r/250
Reviewed-by: Simone Willett <swillett@nvidia.com>
Tested-by: Simone Willett <swillett@nvidia.com>

Conflicts:

	include/media/stagefright/ACodec.h
	media/libmediaplayerservice/nuplayer/NuPlayer.cpp
	media/libmediaplayerservice/nuplayer/NuPlayerRenderer.cpp
	media/libstagefright/ACodec.cpp
---
 include/media/stagefright/ACodec.h                 |   10 ++
 media/libmediaplayerservice/nuplayer/NuPlayer.cpp  |  119 +++++++++++++++++++-
 media/libmediaplayerservice/nuplayer/NuPlayer.h    |   32 +++++
 .../nuplayer/NuPlayerDecoder.cpp                   |    9 ++
 .../nuplayer/NuPlayerDecoder.h                     |    3 +
 .../nuplayer/NuPlayerRenderer.cpp                  |   22 ++++
 .../nuplayer/NuPlayerRenderer.h                    |    7 +
 .../nuplayer/NuPlayerSource.h                      |    3 +
 .../libmediaplayerservice/nuplayer/RTSPSource.cpp  |   25 ++++
 media/libmediaplayerservice/nuplayer/RTSPSource.h  |    8 ++
 media/libstagefright/ACodec.cpp                    |   27 +++++
 11 files changed, 262 insertions(+), 3 deletions(-)

diff --git a/include/media/stagefright/ACodec.h b/include/media/stagefright/ACodec.h
index d27f463..fe70e75 100644
--- a/include/media/stagefright/ACodec.h
+++ b/include/media/stagefright/ACodec.h
@@ -18,6 +18,8 @@
 
 #define A_CODEC_H_
 
+#define PROFILING
+
 #include <stdint.h>
 #include <android/native_window.h>
 #include <media/IOMX.h>
@@ -59,6 +61,9 @@ struct ACodec : public AHierarchicalStateMachine {
     void initiateStart();
 
     void signalRequestIDRFrame();
+#ifdef PROFILING
+    void enableProfileFlags();
+#endif
 
     struct PortDescription : public RefBase {
         size_t countBuffers();
@@ -171,6 +176,11 @@ private:
 
     bool mSentFormat;
     bool mIsEncoder;
+#ifdef PROFILING
+    bool mStatFlag;
+    bool mVideoCodec;
+    int32_t mFrameDrop;
+#endif
 
     bool mShutdownInProgress;
 
diff --git a/media/libmediaplayerservice/nuplayer/NuPlayer.cpp b/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
index 1ddf775..813f1d5 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
+++ b/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
@@ -44,6 +44,9 @@
 #include <gui/ISurfaceTexture.h>
 
 #include "avc_utils.h"
+#ifdef PROFILING
+#include <cutils/properties.h>
+#endif
 
 #include "ESDS.h"
 #include <media/stagefright/Utils.h>
@@ -57,6 +60,7 @@ NuPlayer::NuPlayer()
       mVideoIsAVC(false),
       mAudioEOS(false),
       mVideoEOS(false),
+      mIsRtspStreaming(false),
       mScanSourcesPending(false),
       mScanSourcesGeneration(0),
       mTimeDiscontinuityPending(false),
@@ -68,8 +72,16 @@ NuPlayer::NuPlayer()
       mSkipRenderingVideoUntilMediaTimeUs(-1ll),
       mVideoLateByUs(0ll),
       mNumFramesTotal(0ll),
-      mNumFramesDropped(0ll),
-      mVideoScalingMode(NATIVE_WINDOW_SCALING_MODE_SCALE_TO_WINDOW) {
+      mVideoScalingMode(NATIVE_WINDOW_SCALING_MODE_SCALE_TO_WINDOW),
+#ifdef PROFILING
+      mAudioSamplesTotal(0ll),
+      mEndTimeUs(0ll),
+      mVideoDamagedAccessUnits(0ll),
+      mAudioDamagedAccessUnits(0ll),
+      mProfFlags(0ll),
+      mFirstFrame(true),
+#endif
+      mNumFramesDropped(0ll) {
 }
 
 NuPlayer::~NuPlayer() {
@@ -87,6 +99,10 @@ void NuPlayer::setDriver(const wp<NuPlayerDriver> &driver) {
 void NuPlayer::setDataSource(const sp<IStreamSource> &source) {
     sp<AMessage> msg = new AMessage(kWhatSetDataSource, id());
 
+#ifdef PROFILING
+    setProfileFlags();
+#endif
+
     char prop[PROPERTY_VALUE_MAX];
     if (property_get("media.stagefright.use-mp4source", prop, NULL)
             && (!strcmp(prop, "1") || !strcasecmp(prop, "true"))) {
@@ -95,6 +111,7 @@ void NuPlayer::setDataSource(const sp<IStreamSource> &source) {
         msg->setObject("source", new StreamingSource(source));
     }
 
+
     msg->post();
 }
 
@@ -117,11 +134,15 @@ static bool IsHTTPLiveURL(const char *url) {
 void NuPlayer::setDataSource(
         const char *url, const KeyedVector<String8, String8> *headers) {
     sp<AMessage> msg = new AMessage(kWhatSetDataSource, id());
-
+#ifdef PROFILING
+    setProfileFlags();
+    mSetDataTimeUs = ALooper::GetNowUs();
+#endif
     sp<Source> source;
     if (IsHTTPLiveURL(url)) {
         source = new HTTPLiveSource(url, headers, mUIDValid, mUID);
     } else if (!strncasecmp(url, "rtsp://", 7)) {
+        mIsRtspStreaming = true;
         source = new RTSPSource(url, headers, mUIDValid, mUID);
     } else {
         source = new GenericSource(url, headers, mUIDValid, mUID);
@@ -134,6 +155,10 @@ void NuPlayer::setDataSource(
 void NuPlayer::setDataSource(int fd, int64_t offset, int64_t length) {
     sp<AMessage> msg = new AMessage(kWhatSetDataSource, id());
 
+#ifdef PROFILING
+    setProfileFlags();
+#endif
+
     sp<Source> source = new GenericSource(fd, offset, length);
     msg->setObject("source", source);
     msg->post();
@@ -175,6 +200,23 @@ void NuPlayer::seekToAsync(int64_t seekTimeUs) {
     msg->post();
 }
 
+#ifdef PROFILING
+void NuPlayer::setProfileFlags() {
+    char value[PROPERTY_VALUE_MAX];
+
+    size_t kNumProfileFlags =
+        sizeof(kProfileProps) / sizeof(kProfileProps[0]);
+
+    for (size_t i = 0; i < kNumProfileFlags; ++i) {
+        property_get(kProfileProps[i], value, NULL);
+        if (atoi(value)) {
+            mProfFlags |= 1 << i;
+        }
+    }
+    ALOGI("Profile flag is set to %lld", mProfFlags);
+}
+#endif
+
 // static
 bool NuPlayer::IsFlushingState(FlushStatus state, bool *needShutdown) {
     switch (state) {
@@ -247,6 +289,11 @@ void NuPlayer::onMessageReceived(const sp<AMessage> &msg) {
             mVideoLateByUs = 0;
             mNumFramesTotal = 0;
             mNumFramesDropped = 0;
+#ifdef PROFILING
+            mAudioSamplesTotal = 0;
+            mVideoDamagedAccessUnits = 0;
+            mAudioDamagedAccessUnits = 0;
+#endif
 
             mSource->start();
 
@@ -278,7 +325,11 @@ void NuPlayer::onMessageReceived(const sp<AMessage> &msg) {
                 instantiateDecoder(false, &mVideoDecoder);
             }
 
+#ifdef PROFILING
+            if (mAudioSink != NULL && !(mProfFlags & kNoAudio)) {
+#else
             if (mAudioSink != NULL) {
+#endif
                 instantiateDecoder(true, &mAudioDecoder);
             }
 
@@ -297,8 +348,14 @@ void NuPlayer::onMessageReceived(const sp<AMessage> &msg) {
                 break;
             }
 
+#ifdef PROFILING
+            if (((mAudioDecoder == NULL && mAudioSink != NULL)
+                  && !(mProfFlags & kNoAudio) ) 
+                  || (mVideoDecoder == NULL && mNativeWindow != NULL)) {
+#else
             if ((mAudioDecoder == NULL && mAudioSink != NULL)
                     || (mVideoDecoder == NULL && mNativeWindow != NULL)) {
+#endif
                 msg->post(100000ll);
                 mScanSourcesPending = true;
             }
@@ -331,6 +388,15 @@ void NuPlayer::onMessageReceived(const sp<AMessage> &msg) {
 
                 if (err == ERROR_END_OF_STREAM) {
                     ALOGV("got %s decoder EOS", audio ? "audio" : "video");
+#ifdef PROFILING
+                    if (mIsRtspStreaming) {
+                        if (!audio) {
+                            mSource->getDamagedAccessUnits(&mVideoDamagedAccessUnits, audio);
+                        } else {
+                            mSource->getDamagedAccessUnits(&mAudioDamagedAccessUnits, audio);
+                        }
+                    }
+#endif
                 } else {
                     ALOGV("got %s decoder EOS w/ error %d",
                          audio ? "audio" : "video",
@@ -438,6 +504,29 @@ void NuPlayer::onMessageReceived(const sp<AMessage> &msg) {
                 }
             } else if (what == ACodec::kWhatShutdownCompleted) {
                 ALOGV("%s shutdown completed", audio ? "audio" : "video");
+#ifdef PROFILING
+                if (mProfFlags & kShowStats) {
+                    if (!audio && mVideoEOS) {
+                        int32_t renderDrop;
+                        CHECK(codecRequest->findInt32("fdrop", &renderDrop));
+                        int64_t latencyTimeUs = mStartTimeUs - mSetDataTimeUs;
+                        ALOGI("---------Video Profiling Statistics---------");
+                        int fps = (mNumFramesTotal / ((mEndTimeUs - mStartTimeUs)/1E6)) ;
+                        ALOGI("---------FPS : %d", fps);
+                        ALOGI("---------Frames Dropped By Parser : %lld",mNumFramesDropped);
+                        ALOGI("---------Frames Dropped By Renderer : %d",renderDrop);
+                        ALOGI("---------Total Frames Dropped : %lld", mNumFramesDropped + renderDrop);
+                        ALOGI("---------Video Damaged Access units : %d", mVideoDamagedAccessUnits);
+                        ALOGI("---------Total Video Frames : %lld", mNumFramesTotal + mVideoDamagedAccessUnits);
+                        ALOGI("---------Buffering Latency: = %.3f secs", latencyTimeUs/1E6);
+                        ALOGI("---------Duration : %.3f sec", (mEndTimeUs - mStartTimeUs)/1E6);
+                    } else if (audio && mAudioEOS) {
+                        ALOGI("---------Audio Profiling Statistics---------");
+                        ALOGI("---------Audio Damaged Access units: %d", mAudioDamagedAccessUnits);
+                        ALOGI("---------Total Audio Samples : %lld", mAudioSamplesTotal + mAudioDamagedAccessUnits);
+                    }
+                }
+#endif
                 if (audio) {
                     mAudioDecoder.clear();
 
@@ -457,6 +546,15 @@ void NuPlayer::onMessageReceived(const sp<AMessage> &msg) {
 
                 mRenderer->queueEOS(audio, UNKNOWN_ERROR);
             } else if (what == ACodec::kWhatDrainThisBuffer) {
+#ifdef PROFILING
+                if (mFirstFrame) {
+                    mFirstFrame = false;
+                    mStartTimeUs = ALooper::GetNowUs();
+                    if (mProfFlags & kNoAvsync) {
+                        mRenderer->enableNoAvSync();
+                    }
+                }
+#endif
                 renderBuffer(audio, codecRequest);
             } else {
                 ALOGV("Unhandled codec notification %d.", what);
@@ -481,6 +579,11 @@ void NuPlayer::onMessageReceived(const sp<AMessage> &msg) {
                     mAudioEOS = true;
                 } else {
                     mVideoEOS = true;
+#ifdef PROFILING
+                    if (mProfFlags & kShowStats) {
+                        mEndTimeUs = ALooper::GetNowUs();
+                    }
+#endif
                 }
 
                 if (finalResult == ERROR_END_OF_STREAM) {
@@ -725,6 +828,12 @@ status_t NuPlayer::instantiateDecoder(bool audio, sp<Decoder> *decoder) {
         }
     }
 
+#ifdef PROFILING
+    if (mProfFlags & kShowStats) {
+        (*decoder)->enableProfileFlags();
+    }
+#endif
+
     return OK;
 }
 
@@ -817,7 +926,11 @@ status_t NuPlayer::feedDecoderInputData(bool audio, const sp<AMessage> &msg) {
 
         if (!audio) {
             ++mNumFramesTotal;
+#ifdef PROFILING
+        } else {
+            ++mAudioSamplesTotal;
         }
+#endif
 
         dropAccessUnit = false;
         if (!audio
diff --git a/media/libmediaplayerservice/nuplayer/NuPlayer.h b/media/libmediaplayerservice/nuplayer/NuPlayer.h
index 36d3a9c..39033dd 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayer.h
+++ b/media/libmediaplayerservice/nuplayer/NuPlayer.h
@@ -18,12 +18,22 @@
 
 #define NU_PLAYER_H_
 
+#define PROFILING
+
 #include <media/MediaPlayerInterface.h>
 #include <media/stagefright/foundation/AHandler.h>
 #include <media/stagefright/NativeWindowWrapper.h>
 
 namespace android {
 
+#ifdef PROFILING
+    static const char *kProfileProps[] = {
+        "enable-prof",
+        "enable-nuNoAud",
+        "enable-nuNoAvs",
+    };
+#endif
+
 struct ACodec;
 struct MetaData;
 struct NuPlayerDriver;
@@ -31,6 +41,14 @@ struct NuPlayerDriver;
 struct NuPlayer : public AHandler {
     NuPlayer();
 
+#ifdef PROFILING
+    enum ProfileFlags {
+        kShowStats            = 1,
+        kNoAudio              = 2,
+        kNoAvsync             = 4,
+    };
+#endif
+
     void setUID(uid_t uid);
 
     void setDriver(const wp<NuPlayerDriver> &driver);
@@ -103,10 +121,24 @@ private:
 
     bool mAudioEOS;
     bool mVideoEOS;
+    bool mIsRtspStreaming;
 
     bool mScanSourcesPending;
     int32_t mScanSourcesGeneration;
 
+#ifdef PROFILING
+    bool mFirstFrame;
+    int64_t mStartTimeUs;
+    int64_t mSetDataTimeUs;
+    int64_t mEndTimeUs;
+    int32_t mVideoDamagedAccessUnits;
+    int32_t mAudioDamagedAccessUnits;
+    int64_t mAudioSamplesTotal;
+    uint64_t mProfFlags;//1 - nuProf, 2 -nuNoAud , 4 - nuNoAvs
+
+    void setProfileFlags();
+#endif
+
     enum FlushStatus {
         NONE,
         AWAITING_DISCONTINUITY,
diff --git a/media/libmediaplayerservice/nuplayer/NuPlayerDecoder.cpp b/media/libmediaplayerservice/nuplayer/NuPlayerDecoder.cpp
index 22f699e..8fa6116 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayerDecoder.cpp
+++ b/media/libmediaplayerservice/nuplayer/NuPlayerDecoder.cpp
@@ -147,5 +147,14 @@ void NuPlayer::Decoder::initiateShutdown() {
     }
 }
 
+#ifdef PROFILING
+void NuPlayer::Decoder::enableProfileFlags() {
+    if (mCodec != NULL) {
+        mCodec->enableProfileFlags();
+    }
+}
+#endif
+
+
 }  // namespace android
 
diff --git a/media/libmediaplayerservice/nuplayer/NuPlayerDecoder.h b/media/libmediaplayerservice/nuplayer/NuPlayerDecoder.h
index a876148..03a0707 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayerDecoder.h
+++ b/media/libmediaplayerservice/nuplayer/NuPlayerDecoder.h
@@ -35,6 +35,9 @@ struct NuPlayer::Decoder : public AHandler {
     void signalFlush();
     void signalResume();
     void initiateShutdown();
+#ifdef PROFILING
+    void enableProfileFlags();
+#endif
 
 protected:
     virtual ~Decoder();
diff --git a/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.cpp b/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.cpp
index 8a75f83..e9c23f2 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.cpp
+++ b/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.cpp
@@ -24,6 +24,10 @@
 #include <media/stagefright/foundation/ADebug.h>
 #include <media/stagefright/foundation/AMessage.h>
 
+#ifdef PROFILING
+#include <cutils/properties.h>
+#endif
+
 namespace android {
 
 // static
@@ -48,6 +52,9 @@ NuPlayer::Renderer::Renderer(
       mSyncQueues(false),
       mPaused(false),
       mVideoRenderingStarted(false),
+#ifdef PROFILING
+      mNoAvsync(false),
+#endif
       mLastPositionUpdateUs(-1ll),
       mVideoLateByUs(0ll) {
 }
@@ -108,6 +115,12 @@ void NuPlayer::Renderer::resume() {
     (new AMessage(kWhatResume, id()))->post();
 }
 
+#ifdef PROFILING
+void NuPlayer::Renderer::enableNoAvSync() {
+    mNoAvsync = true;
+}
+#endif
+
 void NuPlayer::Renderer::onMessageReceived(const sp<AMessage> &msg) {
     switch (msg->what()) {
         case kWhatDrainAudioQueue:
@@ -383,7 +396,16 @@ void NuPlayer::Renderer::onDrainVideoQueue() {
         ALOGV("rendering video at media time %.2f secs", mediaTimeUs / 1E6);
     }
 
+#ifdef PROFILING
+    if (mNoAvsync) {
+        entry->mNotifyConsumed->setInt32("render", true);
+    } else {
+        entry->mNotifyConsumed->setInt32("render", !tooLate);
+    }
+#else
     entry->mNotifyConsumed->setInt32("render", !tooLate);
+#endif
+
     entry->mNotifyConsumed->post();
     mVideoQueue.erase(mVideoQueue.begin());
     entry = NULL;
diff --git a/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.h b/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.h
index e4368c7..5493831 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.h
+++ b/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.h
@@ -43,6 +43,9 @@ struct NuPlayer::Renderer : public AHandler {
 
     void pause();
     void resume();
+#ifdef PROFILING
+    void enableNoAvSync();
+#endif
 
     enum {
         kWhatEOS                 = 'eos ',
@@ -102,6 +105,10 @@ private:
     bool mPaused;
     bool mVideoRenderingStarted;
 
+#ifdef PROFILING
+    bool mNoAvsync;
+#endif
+
     int64_t mLastPositionUpdateUs;
     int64_t mVideoLateByUs;
 
diff --git a/media/libmediaplayerservice/nuplayer/NuPlayerSource.h b/media/libmediaplayerservice/nuplayer/NuPlayerSource.h
index 66aeff3..91b5c57 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayerSource.h
+++ b/media/libmediaplayerservice/nuplayer/NuPlayerSource.h
@@ -28,6 +28,9 @@ struct NuPlayer::Source : public RefBase {
     Source() {}
 
     virtual void start() = 0;
+#ifdef PROFILING
+    virtual void getDamagedAccessUnits(int32_t *damagedAccessUnits, bool audio) {}
+#endif
     virtual void stop() {}
 
     // Returns OK iff more data was available,
diff --git a/media/libmediaplayerservice/nuplayer/RTSPSource.cpp b/media/libmediaplayerservice/nuplayer/RTSPSource.cpp
index 5b2e456..501597f 100644
--- a/media/libmediaplayerservice/nuplayer/RTSPSource.cpp
+++ b/media/libmediaplayerservice/nuplayer/RTSPSource.cpp
@@ -40,6 +40,11 @@ NuPlayer::RTSPSource::RTSPSource(
       mState(DISCONNECTED),
       mFinalResult(OK),
       mDisconnectReplyID(0),
+#ifdef PROFILING
+      mVideoTrackIndex(0),
+      mDamagedVideoAccessUnits(0),
+      mDamagedAudioAccessUnits(0),
+#endif
       mStartingUp(true),
       mSeekGeneration(0) {
     if (headers) {
@@ -192,6 +197,16 @@ status_t NuPlayer::RTSPSource::getDuration(int64_t *durationUs) {
     return OK;
 }
 
+#ifdef PROFILING
+void NuPlayer::RTSPSource::getDamagedAccessUnits(int32_t *damagedAccessUnits, bool audio) {
+    if (audio) {
+        *damagedAccessUnits = mDamagedAudioAccessUnits;
+    } else {
+        *damagedAccessUnits = mDamagedVideoAccessUnits;
+    }
+}
+#endif
+
 status_t NuPlayer::RTSPSource::seekTo(int64_t seekTimeUs) {
     sp<AMessage> msg = new AMessage(kWhatPerformSeek, mReflector->id());
     msg->setInt32("generation", ++mSeekGeneration);
@@ -278,6 +293,13 @@ void NuPlayer::RTSPSource::onMessageReceived(const sp<AMessage> &msg) {
             if (accessUnit->meta()->findInt32("damaged", &damaged)
                     && damaged) {
                 ALOGI("dropping damaged access unit.");
+#ifdef PROFILING
+                    if (trackIndex == mVideoTrackIndex && mVideoTrack != NULL) {
+                        ++mDamagedVideoAccessUnits;
+                    } else {
+                        ++mDamagedAudioAccessUnits;
+                    }
+#endif
                 break;
             }
 
@@ -449,6 +471,9 @@ void NuPlayer::RTSPSource::onConnected() {
             if (isAudio) {
                 mAudioTrack = source;
             } else {
+#ifdef PROFILING
+                mVideoTrackIndex = i;
+#endif
                 mVideoTrack = source;
             }
 
diff --git a/media/libmediaplayerservice/nuplayer/RTSPSource.h b/media/libmediaplayerservice/nuplayer/RTSPSource.h
index f07c724..a7239ba 100644
--- a/media/libmediaplayerservice/nuplayer/RTSPSource.h
+++ b/media/libmediaplayerservice/nuplayer/RTSPSource.h
@@ -46,6 +46,9 @@ struct NuPlayer::RTSPSource : public NuPlayer::Source {
 
     virtual status_t getDuration(int64_t *durationUs);
     virtual status_t seekTo(int64_t seekTimeUs);
+#ifdef PROFILING
+    virtual void getDamagedAccessUnits(int32_t *damagedAccessUnits, bool audio);
+#endif
     virtual bool isSeekable();
 
     void onMessageReceived(const sp<AMessage> &msg);
@@ -104,6 +107,11 @@ private:
     sp<ATSParser> mTSParser;
 
     int32_t mSeekGeneration;
+#ifdef PROFILING
+    size_t mVideoTrackIndex;
+    int32_t mDamagedVideoAccessUnits;
+    int32_t mDamagedAudioAccessUnits;
+#endif
 
     sp<AnotherPacketSource> getSource(bool audio);
 
diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 2b4220f..85e48ab 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -37,6 +37,9 @@
 #include <OMX_Component.h>
 
 #include "include/avc_utils.h"
+#ifdef PROFILING
+#include <cutils/properties.h>
+#endif
 
 namespace android {
 
@@ -357,6 +360,11 @@ ACodec::ACodec()
 
     mPortEOS[kPortIndexInput] = mPortEOS[kPortIndexOutput] = false;
     mInputEOSResult = OK;
+#ifdef PROFILING
+    mFrameDrop = 0;
+    mVideoCodec = false;
+    mStatFlag = false;
+#endif
 
     changeState(mUninitializedState);
 }
@@ -409,6 +417,12 @@ void ACodec::signalRequestIDRFrame() {
     (new AMessage(kWhatRequestIDRFrame, id()))->post();
 }
 
+#ifdef PROFILING
+void ACodec::enableProfileFlags() {
+    mStatFlag = true;
+}
+#endif
+
 status_t ACodec::allocateBuffersOnPort(OMX_U32 portIndex) {
     CHECK(portIndex == kPortIndexInput || portIndex == kPortIndexOutput);
 
@@ -911,6 +925,9 @@ status_t ACodec::configureCodec(
     }
 
     if (!strncasecmp(mime, "video/", 6)) {
+#ifdef PROFILING
+        mVideoCodec = true;
+#endif
         if (encoder) {
             err = setupVideoEncoder(mime, msg);
         } else {
@@ -2874,6 +2891,11 @@ void ACodec::BaseState::onOutputBufferDrained(const sp<AMessage> &msg) {
         }
     } else {
         info->mStatus = BufferInfo::OWNED_BY_US;
+#ifdef PROFILING
+        if (mCodec->mStatFlag && mCodec->mVideoCodec) {
+            mCodec->mFrameDrop++;
+        }
+#endif
     }
 
     PortMode mode = getPortMode(kPortIndexOutput);
@@ -3135,6 +3157,11 @@ void ACodec::LoadedState::onShutdown(bool keepComponentAllocated) {
 
     sp<AMessage> notify = mCodec->mNotify->dup();
     notify->setInt32("what", ACodec::kWhatShutdownCompleted);
+#ifdef PROFILING
+            if (mCodec->mStatFlag && mCodec->mVideoCodec) {
+                notify->setInt32("fdrop", mCodec->mFrameDrop);
+            }
+#endif
     notify->post();
 }
 
-- 
1.7.1

