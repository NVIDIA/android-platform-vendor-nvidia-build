From bbf72400ae02f5d81f6d6813db33d6cb331bbb20 Mon Sep 17 00:00:00 2001
From: Aniruddha C <aniruddhac@nvidia.com>
Date: Fri, 20 Jul 2012 17:12:47 +0530
Subject: [PATCH 24/40] Fix RTSP random crashes

Fix random crashes due to setup failure and due to incorrect
play response.

Bug 1019981, 1016072

Change-Id: Ifc86f41759beddb038481bfd6da607feb9e30866

[OMX-AL] : Fix for broken RTSP streaming playback

The listener of OMX-AL is not notified by awesome player
for buffer updates even if high watermark is reached.
Notify listener so that it will trigger play() after
prepare() is done.

Bug 904558

Reviewed-on: http://git-master/r/66442
(cherry picked from commit f9332abf1fcaf9cb035de6c40ac3b01089acf885)

Change-Id: Ic6e9b615bf0367f1a5b48f9e5620e59802f6ec96

[SF Streaming] Fix RTSP PLAY/PAUSE crash issue

Update the playSent and Paused variables while sending
the request only. Dont wait for the response from the
server.

Bug 1027019

Change-Id: Ide6ae5feb79e72669e155773981a63ba83d99039

StageFright-RTSP: Handle relative track URL in play response

Changes to handle relative track URL in play response if any.
Some servers do send relative URL instead of absolute track
url in play response.

Bug 1048589

Reviewed-on: http://git-master/r/133490
(cherry picked from commit 8119b7f7175a9c807728135268396bb1b1ee96b7)

Change-Id: I5266c3b48fc06664b47af83effa32d42887d1502

omx-al : add video/mpeg2 mime entry in ACodec setComponentRole

ACodec SetComponentRole did not have video/mpeg2 mime entry. So for mpeg2
video it was returing ERROR_UNSUPPORTED causing mpeg2 video playback to fail.
Added the video/mpeg2 mime entry to the list.

bug 1023107

Change-Id: If3e3b7acac7dff238e892f098e047f53ebeeb6ed
---
 media/libstagefright/ACodec.cpp        |    2 ++
 media/libstagefright/AwesomePlayer.cpp |    6 ++++++
 media/libstagefright/rtsp/MyHandler.h  |   28 ++++++++++++++++++++++++----
 3 files changed, 32 insertions(+), 4 deletions(-)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 0ee908b..bf93d58 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -820,6 +820,8 @@ status_t ACodec::setComponentRole(
             "audio_decoder.raw", "audio_encoder.raw" },
         { MEDIA_MIMETYPE_AUDIO_FLAC,
             "audio_decoder.flac", "audio_encoder.flac" },
+        { MEDIA_MIMETYPE_VIDEO_MPEG2,
+            "video_decoder.mpeg2", "video_encoder.mpeg2" },
     };
 
     static const size_t kNumMimeToRole =
diff --git a/media/libstagefright/AwesomePlayer.cpp b/media/libstagefright/AwesomePlayer.cpp
index 2f0958b..cb4817b 100644
--- a/media/libstagefright/AwesomePlayer.cpp
+++ b/media/libstagefright/AwesomePlayer.cpp
@@ -958,6 +958,12 @@ void AwesomePlayer::onBufferingUpdate() {
             } else if (mFlags & PREPARING) {
                 ALOGV("cache has filled up (%.2f secs), prepare is done",
                      cachedDurationUs / 1E6);
+                int percentage = 100.0 * (double)cachedDurationUs / mDurationUs;
+                if (percentage > 100) {
+                  percentage = 100;
+                }
+
+                notifyListener_l(MEDIA_BUFFERING_UPDATE, percentage);
                 finishAsyncPrepare_l();
 #ifdef PROFILING
                 mProfileStats->mHighWaterMarkTimeUs = ALooper::GetNowUs();
diff --git a/media/libstagefright/rtsp/MyHandler.h b/media/libstagefright/rtsp/MyHandler.h
index 631d385..3a07c5b 100644
--- a/media/libstagefright/rtsp/MyHandler.h
+++ b/media/libstagefright/rtsp/MyHandler.h
@@ -615,7 +615,7 @@ struct MyHandler : public AHandler {
                 ++index;
                 if (index < mSessionDesc->countTracks()) {
                     setupTrack(index);
-                } else if (mSetupTracksSuccessful) {
+                } else if (mSetupTracksSuccessful && (mTracks.size() > 0)) {
                     ++mKeepAliveGeneration;
                     postKeepAlive();
 
@@ -911,12 +911,13 @@ struct MyHandler : public AHandler {
                     break;
                 }
 
-                if (mPaused) {
+                if (mPaused && !mPlayRequestSent) {
                     LOGW("Already paused...");
                     break;
                 }
 
                 mCheckPending = true;
+                mPlayRequestSent = false;
                 ++mCheckGeneration;
 
                 AString request = "PAUSE ";
@@ -950,11 +951,12 @@ struct MyHandler : public AHandler {
 
             case 'resu':
             {
-                if (!mSeekable || !mPaused) {
+                if (!mSeekable || !mPaused || mPlayRequestSent) {
                     LOGW("Session not paused...");
                     break;
                 }
 
+                mPaused = false;
                 AString request = "PLAY ";
                 request.append(mSessionURL);
                 request.append(" RTSP/1.0\r\n");
@@ -967,6 +969,7 @@ struct MyHandler : public AHandler {
 
                 sp<AMessage> reply = new AMessage('pcom', id());
                 mConn->sendRequest(request.c_str(), reply);
+                mPlayRequestSent = true;
                 break;
             }
 
@@ -979,7 +982,6 @@ struct MyHandler : public AHandler {
                      result, strerror(-result));
 
                 mCheckPending = false;
-                mPaused = false;
                 postAccessUnitTimeoutCheck();
 
                 if (result == OK) {
@@ -1079,6 +1081,7 @@ struct MyHandler : public AHandler {
                 request.append("\r\n");
 
                 sp<AMessage> reply = new AMessage('see2', id());
+                mPlayRequestSent = true;
                 mConn->sendRequest(request.c_str(), reply);
                 break;
             }
@@ -1276,6 +1279,23 @@ struct MyHandler : public AHandler {
 
             CHECK(GetAttribute((*it).c_str(), "url", &val));
 
+            if (!val.startsWith("rtsp://")) {
+                // Some servers specify a relative track URL
+                // in  play response, combine with base URL
+
+                ALOGW("Server specified a non-absolute track URL"
+                     "in play response, combining it with the "
+                     "session URL to get something usable...");
+
+                AString tmp;
+                CHECK(MakeURL(
+                            mSessionURL.c_str(),
+                            mBaseURL.c_str(),
+                            &tmp));
+                tmp.append(val);//append the trackId
+                val = tmp;
+            }
+
             size_t trackIndex = 0;
             while (trackIndex < mTracks.size()
                     && !(val == mTracks.editItemAt(trackIndex).mURL)) {
-- 
1.7.1

