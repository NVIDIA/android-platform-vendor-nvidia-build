From acceea6e493d30cf0e348fc30b1ac799afd5c4fe Mon Sep 17 00:00:00 2001
From: manikanta kanamarlapudi <manikak@nvidia.com>
Date: Tue, 7 Aug 2012 17:53:58 +0530
Subject: [PATCH 31/40] libstagefright : Handled EOS in audio streams which have dynamic sampling rate change

- when ever we got port setting settings change event we deleted the previous
  audio track and created the new one .
- when EOS came we are checking the pending frames left to paly from the frames
  played out by audio track and total no of frames submitted to audio track.
- The value of Playedout frames is coming as the frames played after dynamic port
  setting change since we deleted the previous audio track
- we are subracting this value from the total frames  and waiting for these
  frames to play before sending EOS
- corrected this logic as subtracting the Playedout frames from the total frames
  submitted to the track after port settings change

bug 1024554

Change-Id: I80c9a5eec78296b0b1e0f79234596826f9afeee3
---
 include/media/stagefright/AudioPlayer.h |    1 +
 media/libstagefright/AudioPlayer.cpp    |   15 +++++++++++++--
 2 files changed, 14 insertions(+), 2 deletions(-)

diff --git a/include/media/stagefright/AudioPlayer.h b/include/media/stagefright/AudioPlayer.h
index d317699..0ce7a54 100644
--- a/include/media/stagefright/AudioPlayer.h
+++ b/include/media/stagefright/AudioPlayer.h
@@ -88,6 +88,7 @@ private:
     Mutex mLock;
     int64_t mNumFramesPlayed;
     int64_t mNumFramesPlayedSysTimeUs;
+    int64_t mNumFramesPlayedInSegment;   // the frames present between consecutive port settings is considering as segment
 
     int64_t mPositionTimeMediaUs;
     int64_t mPositionTimeRealUs;
diff --git a/media/libstagefright/AudioPlayer.cpp b/media/libstagefright/AudioPlayer.cpp
index cf7440b..c702443 100644
--- a/media/libstagefright/AudioPlayer.cpp
+++ b/media/libstagefright/AudioPlayer.cpp
@@ -69,6 +69,7 @@ AudioPlayer::AudioPlayer(
       mFrameSize(0),
       mAudioFormat(AUDIO_FORMAT_PCM_16_BIT),
       mNumFramesPlayed(0),
+      mNumFramesPlayedInSegment(0),
       mNumFramesPlayedSysTimeUs(ALooper::GetNowUs()),
       mPositionTimeMediaUs(-1),
       mPositionTimeRealUs(-1),
@@ -416,7 +417,7 @@ uint32_t AudioPlayer::getNumFramesPendingPlayout() const {
     // mNumFramesPlayed is the number of frames submitted
     // to the audio sink for playback, but not all of them
     // may have played out by now.
-    return mNumFramesPlayed - numFramesPlayedOut;
+    return mNumFramesPlayedInSegment - numFramesPlayedOut;
 }
 
 void AudioPlayer::onPortSettingsChangedEvent() {
@@ -456,6 +457,7 @@ void AudioPlayer::onPortSettingsChangedEvent() {
     success = format->findInt32(kKeySampleRate, &mSampleRate);
     CHECK(success);
 
+    mNumFramesPlayedInSegment = 0;
     int32_t numChannels, channelMask;
     success = format->findInt32(kKeyChannelCount, &numChannels);
     CHECK(success);
@@ -712,6 +714,7 @@ size_t AudioPlayer::fillBuffer(void *data, size_t size) {
     {
         Mutex::Autolock autoLock(mLock);
         mNumFramesPlayed += size_done / mFrameSize;
+        mNumFramesPlayedInSegment += size_done / mFrameSize;
         mNumFramesPlayedSysTimeUs = ALooper::GetNowUs();
 
         if (mReachedEOS) {
@@ -723,7 +726,15 @@ size_t AudioPlayer::fillBuffer(void *data, size_t size) {
 
    if (postPortSettingsChanged) {
         mPortSettingsChangedEventPending = true;
-        mQueue.postEvent(mPortSettingsChangedEvent);
+        // These are the number of frames submitted to the
+        // AudioTrack that you haven't heard yet.
+        uint32_t numFramesPendingPlayout =
+                        getNumFramesPendingPlayout();
+        int64_t timeToCompletionUs =
+                        (1000000ll * numFramesPendingPlayout) / mSampleRate;
+
+        //Delaying the event to complete the playback of the remaining frames by track
+        mQueue.postEventWithDelay(mPortSettingsChangedEvent,timeToCompletionUs);
     }
 
     if (postEOS) {
-- 
1.7.1

